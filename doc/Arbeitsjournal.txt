----------------------------------------------------------------------------
Arbeitsjournal - Projekt1 - easyGraph - Team WEW 
----------------------------------------------------------------------------

============================================================================
05.12.2014 webel3 / wengm17 / engek1

- 2 Bugs behoben
- optische Erkennung fertig implementiert
- Update der ankommenden Edges bei Vertex Verschiebung implementiert
- Anforderungskatalog fertiggestellt für die Projekt Dokumentation
- Anforderungen anhand der RUP Satzschablone angepasst
- Anforderungen qualifiziert und kategorisiert
- Interface Tester gemacht um Schnittstelle des EasyGraph
  anhand einer Algorithmussimulation zu testen.
- Eingabeelemente disablen in gewissen Modi.
- Elemente färben von Schnittstelle aus.
============================================================================
26.11.2014 - 03.12.2014 webel3 / wengm17    (engek1 -> krank)

Refactoring an den Events und Eventhandlern.
Einbau einer Statemachine, welche neu die Eventhandler inkludiert (dafür 
Zwischenlayer von Eventhandlern entfernt).

Colorable Interface erstellt und in GuiVertex implementiert, damit 
ein Repaint mit anderen Farben erwirkt werden kann.

--> Erkenntnis: mittels aufrufen von "effectProperty()" kann ein 
Gui-Element zum neuladen gezwungen werden.
============================================================================
26.11.2014 engek1 / webel3

Refactoring an den Events / Eventhandlern und der State Machine 
mit den unterschiedlichen RunModes.
Annotations zur Erkennung von Algorithmen erstellt.
============================================================================
21.11.2014 engek1 / wengm17 / webel3

Erstellung eigener Events und entsprechender Eventhandler.
Erste Drag-n-Drop Versuche für Vertices.
============================================================================
14.11.2014	engek1 / wengm17

PropertiesView.fxml angepasst. 4 Labels für die Optionen hinzugefügt, um 
die Edges und Vertexs Optionen (Name, Gewicht, Farbe, usw.) anzeigen zu
können. Button für die Anpassung der Optionen hinzugefügt. Kurzbefehle 
für die einfachere Bedienung in der EditorView.fxml eingefügt. 
============================================================================
14.11.2014	engek1

Verschieben von Vertizes in erster Version.
============================================================================
14.11.2014	webel3 / wengm17

Eigenens GUI-Eventhandling erstellt

Weitere Anpassungen am GUI vorgenommen.
============================================================================
13.11.2014	engek1

Hinzufügen von Vertizes mittels Klick auf die Zeichenfläche.
Hinzufügen von Edges mittels Auswählen von Start- und Zielvertex.
============================================================================
12.11.2014	webel3 / wengm17

Anpassen des GUI, hinzufügen von ICON's sowie zusätzlichen Buttons.

Beschluss mit Peter Schwab:
Edge Interface erweitern:
- origin()			liefert den Ursprungsvertex
- destination() 	liefert den Zielvertex
- opposite(Vertex)	gibt den anderen Vertex einer Edge zurück (wird betätigt, 
					wenn der Graph nicht-gerichtet ist)
============================================================================
07.11.2014	engek1

Erarbeiten der Visualisierungsmöglichkeiten eines Vertexs oder Edges. 
Step-Mechanismus für die Zwischenspeicherung der Algorithmen und zur 
schrittweisen Ausführung inkl. Rückwärts.
============================================================================
05.11.2014	wengm17

Weitergabe der Installationsanleitung des Projekts an Peter Schwab.
TestLauncher erstellt  für die Überprüfung der verschiedenen JAVAF8
Funktionen anhand eines Beispiels.
============================================================================
31.10.2014	wengm17

Individuelles Durcharbeiten eines passenden JAVAFX8 Tutorials.
Grundfähigkeiten von JAVAFX8 kennen lernen. 

Link:	http://code.makery.ch/java/javafx-8-tutorial-intro/
============================================================================
29.10.2014	wengm17

Suche im Internet nach geeigneten JAVAFX8 Tutorials.
============================================================================
22.10.2014	wengm17

Präsentation des Klassen-Diagramms.
Bestimmen der gewünschten Funktionalitäten und deren Verwendung. 
Besprechen der erarbeiteten Lösung und der erforderlichen Anpassungen auf 
Seiten der graphLip.jar. 

Auftrag:  Repository erstellen und Peter Schwab "read" Rechte vergeben. 	
============================================================================
17.10.2014	wengm17

Erarbeiten des easyGraph UML-Klassen-Diagramms. 
============================================================================
15.10.2014	wengm17

Analysieren der graphLip.jar und abbilden in ein UML-Klassen Diagramm. 
Bestimmen der Interfaces sowie der Klassen Funktionalit�ten. 
============================================================================
10.10.2014	wengm17

Digitalisieren und Anpassen des Domain-Model Entwurfs
Präsenentation des Domain-Models.
Besprechung des Models mit Dr. Peter Schwab.
Aufnahme der offenen Punkte und Pendenzen.

Auftrag: Erstellen eines detailierten Klassen-Models
============================================================================
08.10.2014	wengm17	

Erstellen des ersten Entwurfs des easyGraph Domain-Model
============================================================================
03.10.2014	wengm17	

Erarbeiten der Projekt Haupt- und Unterziele.
============================================================================
01.10.2014	wengm17	

Bestimmen der Funktionalen, Nicht-Funktionalen und Domain Anforderungen.
Erfassen der Anforderungen in ein Mindmap.
Präsentation des Mindmaps und besprechen der Arbeiten mit Dr. Peter Schwab. 

Auftrag: Erstellen eines Domain-Model
============================================================================